@startuml

title Character Creator

struct Variant {
Mesh mesh
Material material
}

class sMeshList {
Scriptable Object
--
Variant[] variants
int savedVariantIndex;
}

class CharacterCustomizable {
  - -MeshFilter filter
  - -Meshrenderer renderer
  - -sMeshOptions meshOptions
  - -int currentFeatureIndex
  - -Button leftbutton
  - -Button rightButton
  - -commandStackOwner: ICommandStackOwner<IReversibleCommand>
  - -commandHandler: UICommandHandler<CharacterCustomizable>
  + +PreviousVariant() : void
  + +NextVariant() : void
  - -ApplyVariant() : void
  - -CheckButtonClick() : void <<event>>
}

sMeshList o-down- Variant
CharacterCustomizable o-down- sMeshList

interface ICommand {
  + +Execute(): void
}

interface IReversibleCommand {
  + +Undo(): void
}

interface ICommandStackManager<<T>> {
  + +history: Stack<T>
  + +Undo(): void
  + +AddCommandToHistory(): void
}

ICommand <|.down. IReversibleCommand
CharacterCustomizable o-- ICommandStackManager


class InputHandler {
  - -commands: Dictionary<Keycode, ICommand> 
  + +AddCommand(): void
  + +HandleInput(): ICommand
}

class UICommandHandler {
  - -commands: Dictionary<Button, List<IReversibleCommand>>
  + +AddCommand(): void
}

class PlayerInput {
  - -inputHandler: InputHandler
  - -Awake(): void
  - -Start(): void
  - -Update(): void
}

PlayerInput o-right-- InputHandler
CharacterCustomizable o-- UICommandHandler

class GoToCreatorCommand
class NextVariantCommand {
  - -customizable: CharacterCustomizable
}
class PreviousVariantCommand {
  - -customizable: CharacterCustomizable
}

class UndoCommand {
  - -owner: ICommandStackOwner<IReversibleCommand>
}

IReversibleCommand <|.down. PreviousVariantCommand
IReversibleCommand <|.down. NextVariantCommand
ICommand <|.down. GoToCreatorCommand
ICommand <|.down. UndoCommand

CharacterCustomizable <.up. NextVariantCommand
CharacterCustomizable <.up. PreviousVariantCommand
CharacterManager <.up. UndoCommand

PlayerInput <.. GoToCreatorCommand

class EventSystem<<static>> {
  + +EventName: enum
  - -eventRegister: Dictionary<EventName, List<EventCallback>> 
  + +Subscribe(): void
  + +Unsubscribe(): void
  + +RaiseEvent(): void
}

class UIObserver {
  - -Button triggerButton
  - -CharacterDone(): void
}

class CreatorManager {
  + +Direction: enum
  - -OnEnable(): void
  - -OnDisable(): void
  + +LoadNextScene(): void <<event>>
}

EventSystem <.up. UIObserver
EventSystem <.down. CreatorManager
EventSystem <.left. CharacterCustomizable


class CharacterManager {
  + +history: Stack<IReversibleCommand>
  - -customizables: CharacterCustomizable[]
  - -inputHandler: InputHandler<ICommand>
  - -Awake(): void
  - -Start(): void
  - -Update(): void
   /Undo(): void
  + +AddCommandToHistory(): void
  - -InjectSelfOnCustomizables(): void
}

CharacterManager <|. ICommandStackManager
CharacterManager o-- InputHandler

@enduml